name: Build & Deploy - Frontend

on:
  push:
    branches:
      - main
      - homo

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: univesp-pi-2/frontend

jobs:
  # ====== JOB 1: BUILD E TESTES ======
  build:
    name: Build, Test e Push de Imagem
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      image_tag: ${{ steps.meta.outputs.image_tag }}
      environment: ${{ steps.meta.outputs.environment }}

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Instalar dependências
        run: npm ci

      - name: Lint
        run: npm run lint 2>/dev/null || echo "Lint não configurado"

      - name: Build do projeto
        run: npm run build

      - name: Testes
        run: npm test 2>/dev/null || echo "Testes não configurados"

      - name: Gerar tags e metadados
        id: meta
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          COMMIT_HASH="${{ github.sha }}"
          COMMIT_SHORT="${COMMIT_HASH:0:7}"
          
          if [[ "$BRANCH_NAME" == "main" ]]; then
            echo "TAGS=latest,$COMMIT_SHORT" >> $GITHUB_OUTPUT
            echo "image_tag=latest" >> $GITHUB_OUTPUT
            echo "environment=prod" >> $GITHUB_OUTPUT
            echo "VITE_BASE_URL=https://projeto-integrador.app.br/api/v1" >> $GITHUB_OUTPUT
          elif [[ "$BRANCH_NAME" == "homo" ]]; then
            echo "TAGS=homo-latest,homo-$COMMIT_SHORT" >> $GITHUB_OUTPUT
            echo "image_tag=homo-latest" >> $GITHUB_OUTPUT
            echo "environment=homo" >> $GITHUB_OUTPUT
            echo "VITE_BASE_URL=https://homo-backapp.projeto-integrador.app.br/api/v1" >> $GITHUB_OUTPUT
          fi

      - name: Login no GitHub Container Registry
        if: github.ref_name == 'main' || github.ref_name == 'homo'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        if: github.ref_name == 'main' || github.ref_name == 'homo'
        uses: docker/setup-buildx-action@v3

      - name: Formatar tags para build
        if: github.ref_name == 'main' || github.ref_name == 'homo'
        id: tags
        run: |
          TAGS_LIST="${{ steps.meta.outputs.TAGS }}"
          REGISTRY_TAGS=""
          for tag in ${TAGS_LIST//,/ }; do
            REGISTRY_TAGS="$REGISTRY_TAGS
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:$tag"
          done
          echo "FORMATTED_TAGS<<EOF" >> $GITHUB_OUTPUT
          echo "$REGISTRY_TAGS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Build e Push da imagem Docker
        if: github.ref_name == 'main' || github.ref_name == 'homo'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./.docker/Dockerfile.prod
          build-args: |
            VITE_BASE_URL=${{ steps.meta.outputs.VITE_BASE_URL }}
          push: true
          tags: ${{ steps.tags.outputs.FORMATTED_TAGS }}

      - name: ✅ Build concluído com sucesso
        run: |
          echo "## ✅ Build Frontend Concluído" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tags**: ${{ steps.meta.outputs.TAGS }}" >> $GITHUB_STEP_SUMMARY

  # ====== JOB 2: DEPLOY (DEPENDE DO BUILD) ======
  deploy:
    name: Deploy no VPS
    runs-on: ubuntu-latest
    needs: build
    if: github.ref_name == 'main' || github.ref_name == 'homo'

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_SECRET_KEY }}

      - name: 🚀 Deploy via SSH
        run: |
          ssh -p ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
            ${{ secrets.SSH_NAME_USER }}@${{ secrets.SSH_HOST }} bash << 'DEPLOY_SCRIPT'
            
            set -e
            
            ENVIRONMENT="${{ needs.build.outputs.environment }}"
            REPO_DIR="/opt/compose"
            
            echo "=========================================="
            echo "🚀 Deploy Frontend - $ENVIRONMENT"
            echo "=========================================="
            
            cd "$REPO_DIR"
            
            echo "📝 Login no GitHub Container Registry..."
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login -u "${{ github.repository_owner }}" --password-stdin ${{ env.REGISTRY }}
            
            echo "⬇️  Pull da imagem Docker..."
            if [[ "$ENVIRONMENT" == "prod" ]]; then
              docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
              COMPOSE_FILE="producao-compose.yml"
              ENV_FILE=".env.prod"
            else
              docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:homo-latest
              COMPOSE_FILE="homologacao-compose.yml"
              ENV_FILE=".env.homo"
            fi
            
            echo "🔄 Atualizando containers..."
            docker compose -f "$COMPOSE_FILE" --env-file "$ENV_FILE" pull
            docker compose -f "$COMPOSE_FILE" --env-file "$ENV_FILE" up -d --no-build
            
            echo "✅ Verificando status..."
            docker ps -a | grep -E "(homo-|prod-)" || true
            
            echo "✅ Deploy Frontend concluído!"
            
          DEPLOY_SCRIPT

      - name: ✅ Deploy concluído
        run: |
          echo "## ✅ Deploy Frontend - ${{ needs.build.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Ambiente**: ${{ needs.build.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: ${{ needs.build.outputs.image_tag }}" >> $GITHUB_STEP_SUMMARY

      - name: ❌ Deploy falhou
        if: failure()
        run: |
          echo "## ❌ Deploy Frontend Falhou" >> $GITHUB_STEP_SUMMARY
          echo "- **Ambiente**: ${{ needs.build.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
