name: CD - Frontend
run-name: Deploy Frontend da branch ${{ github.ref_name }}

on:
  push:
    branches:
      - main
      - homo

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: univesp-pi-2/frontend

jobs:
  deploy:
    name: Deploy no VPS
    runs-on: ubuntu-latest
    if: github.ref_name == 'main' || github.ref_name == 'homo'

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Determinar ambiente
        id: env
        run: |
          if [[ "${{ github.ref_name }}" == "main" ]]; then
            echo "ENVIRONMENT=prod" >> $GITHUB_OUTPUT
            echo "COMPOSE_FILE=producao-compose.yml" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_name }}" == "homo" ]]; then
            echo "ENVIRONMENT=homo" >> $GITHUB_OUTPUT
            echo "COMPOSE_FILE=homologacao-compose.yml" >> $GITHUB_OUTPUT
          fi

      - name: Setup SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_SECRET_KEY }}

      - name: Deploy via SSH (Frontend)
        run: |
          ssh -p ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
            ${{ secrets.SSH_NAME_USER }}@${{ secrets.SSH_HOST }} bash << 'DEPLOY_SCRIPT'
            
            set -e
            
            ENVIRONMENT="${{ steps.env.outputs.ENVIRONMENT }}"
            COMPOSE_FILE="${{ steps.env.outputs.COMPOSE_FILE }}"
            REPO_DIR="/opt/compose"
            
            echo "=========================================="
            echo "Iniciando deploy do Frontend - $ENVIRONMENT"
            echo "=========================================="
            
            # Navegar para diretório de compose
            cd "$REPO_DIR"
            
            echo "Fazendo login no GitHub Container Registry..."
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login -u "${{ github.repository_owner }}" --password-stdin ${{ env.REGISTRY }}
            
            echo "Pulling nova imagem Docker..."
            if [[ "$ENVIRONMENT" == "prod" ]]; then
              docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            else
              docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:homo-latest
            fi
            
            echo "Limpando containers órfãos..."
            # Remover apenas containers orphaned que foram parados
            docker container prune -f || true
            
            echo "Atualizando containers..."
            if [[ "$ENVIRONMENT" == "prod" ]]; then
              docker compose -f "producao-compose-unified.yml" --env-file .env.prod down || true
              docker compose -f "producao-compose-unified.yml" --env-file .env.prod up -d --no-build
            else
              docker compose -f "homologacao-compose-unified.yml" --env-file .env.homo down || true
              docker compose -f "homologacao-compose-unified.yml" --env-file .env.homo up -d --no-build
            fi
            
            echo "Verificando status dos containers..."
            docker ps -a | grep -E "(homo-|prod-)"
            
            echo "Deploy do Frontend concluído com sucesso!"
            
          DEPLOY_SCRIPT

      - name: Verificar saúde do serviço
        run: |
          echo "Verificando saúde do serviço..."

      - name: Notificar sucesso
        run: |
          echo "## ✅ Deploy Frontend Concluído" >> $GITHUB_STEP_SUMMARY
          echo "- **Ambiente**: ${{ steps.env.outputs.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

      - name: Notificar erro
        if: failure()
        run: |
          echo "## ❌ Deploy Frontend Falhou" >> $GITHUB_STEP_SUMMARY
          echo "- **Ambiente**: ${{ steps.env.outputs.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "Verifique os logs do SSH para mais detalhes."